type Query {
    resume(id: ID): Resume
}

type Mutation {
    createResume(person: PersonInput): Resume

    createExperienceList(experienceList: [ExperienceInput], resumeId: ID): [Experience]

    createEducationList(educationList: [EducationInput], resumeId: ID): [Education]
}

type Resume {
    id: ID!
    createdDate: String!
    updatedDate: String!
    person: Person
    experienceList: [Experience]
    projectList: [Project]
}

type Person {
    id: ID!
    name: String
    emailAddress: String
    phoneNumber: String
}

input PersonInput {
    name: String
    emailAddress: String
    phoneNumber: String
}

type School {
    id: ID!
    education: Education
    name: String
    address: String
}

input SchoolInput {
    name: String
    address: String
}

type Education {
    id: ID!
    degree: String
    schoolList: [School]
}

input EducationInput {
    degree: String
    schoolList: [SchoolInput]
}

type Experience {
    id: ID!
    isCurrentRole: Boolean
    companyName: String
    roleTitle: String
    tools: String
    skills: String
    startDate: String
    endDate: String
}

input ExperienceInput {
    isCurrentRole: Boolean
    companyName: String
    roleTitle: String
    tools: String
    skills: String
    startDate: String
    endDate: String
}

type Project {
    id: ID!
    projectName: String
    roleTitle: String
    description: String
}

input ProjectInput {
    projectName: String
    roleTitle: String
    description: String
}