type Query {
    resume(id: ID): Resume
}

type Mutation {
    createResume(person: PersonInput): Resume

    createExperienceList(experienceList: [ExperienceInput], resumeId: ID): [Experience]

    createEducationList(educationList: [EducationInput], resumeId: ID): [Education]

    addEducationToResumeById(education: EducationInput, resumeId: ID): Education
}

type Resume {
    id: ID!
    createdDate: String!
    updatedDate: String!
    person: Person
    educationList: [Education]
    experienceList: [Experience]
    projectList: [Project]
}

type Person {
    id: ID!
    name: String
    emailAddress: String
    phoneNumber: String
}

input PersonInput {
    name: String
    emailAddress: String
    phoneNumber: String
}

type Education {
    id: ID!
    schoolName: String
    schoolAddress: String
    schoolStartDate: String
    schoolEndDate: String
    gpa: Float
    degreeTitle: String
    degreeDescription: String
}

input EducationInput {
    schoolName: String
    schoolAddress: String
    schoolStartDate: String
    schoolEndDate: String
    gpa: Float
    degreeTitle: String
    degreeDescription: String
}

type Experience {
    id: ID!
    isCurrentRole: Boolean
    companyName: String
    companyAddress: String
    startDate: String
    endDate: String
    roleTitle: String
    roleDescription: String
    roleTools: String
    roleSkills: String
}

input ExperienceInput {
    isCurrentRole: Boolean
    companyName: String
    companyAddress: String
    startDate: String
    endDate: String
    roleTitle: String
    roleDescription: String
    roleTools: String
    roleSkills: String
}

type Project {
    id: ID!
    name: String
    description: String
    roleTitle: String
}

input ProjectInput {
    name: String
    description: String
    roleTitle: String
}